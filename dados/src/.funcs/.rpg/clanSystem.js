class ClanSystem {
    constructor() {
        this.clans = {};
        this.maxMembers = {
            1: 10,  // N√≠vel 1: 10 membros
            2: 15,  // N√≠vel 2: 15 membros
            3: 20,  // N√≠vel 3: 20 membros
            4: 25,  // N√≠vel 4: 25 membros
            5: 30   // N√≠vel 5: 30 membros
        };

        this.upgrades = {
            'banco': {
                name: 'Banco do Cl√£',
                description: 'Armazena recursos para membros',
                maxLevel: 5,
                cost: level => 50000 * level,
                effect: level => ({ capacity: 1000000 * level })
            },
            'forja': {
                name: 'Forja do Cl√£',
                description: 'Permite criar itens especiais',
                maxLevel: 5,
                cost: level => 100000 * level,
                effect: level => ({ craftBonus: 0.1 * level })
            },
            'altar': {
                name: 'Altar do Cl√£',
                description: 'Fornece b√¥nus de XP',
                maxLevel: 5,
                cost: level => 75000 * level,
                effect: level => ({ xpBonus: 0.05 * level })
            },
            'quartel': {
                name: 'Quartel do Cl√£',
                description: 'Aumenta poder em guerras',
                maxLevel: 5,
                cost: level => 150000 * level,
                effect: level => ({ attackBonus: 0.1 * level })
            }
        };
    }

    createClan(leader, name, tag) {
        // Verifica se nome/tag j√° existem
        if (Object.values(this.clans).some(c => c.name === name || c.tag === tag)) {
            throw new Error('‚ùå Nome ou tag j√° em uso!');
        }

        // Verifica formato da tag
        if (!/^[A-Z]{2,4}$/.test(tag)) {
            throw new Error('‚ùå Tag deve ter 2-4 letras mai√∫sculas!');
        }

        // Cria o cl√£
        const clan = {
            id: `clan_${Date.now()}`,
            name: name,
            tag: tag,
            leader: leader.id,
            officers: [],
            members: [leader.id],
            level: 1,
            xp: 0,
            money: 0,
            bank: {
                capacity: 1000000,
                resources: {}
            },
            buildings: {
                banco: 1,
                forja: 0,
                altar: 0,
                quartel: 0
            },
            wars: {
                wins: 0,
                losses: 0
            },
            createdAt: Date.now()
        };

        this.clans[clan.id] = clan;

        return {
            success: true,
            clan: clan,
            message: `üõ°Ô∏è *CL√É CRIADO*\n\n` +
                    `Nome: ${clan.name}\n` +
                    `Tag: [${clan.tag}]\n` +
                    `L√≠der: ${leader.name}\n\n` +
                    `Use /clan convidar para recrutar membros!`
        };
    }

    joinClan(player, clanId) {
        const clan = this.clans[clanId];
        if (!clan) throw new Error('‚ùå Cl√£ n√£o encontrado!');

        // Verifica se j√° est√° em um cl√£
        if (player.clan) {
            throw new Error('‚ùå Voc√™ j√° est√° em um cl√£! Use /clan sair primeiro.');
        }

        // Verifica limite de membros
        if (clan.members.length >= this.maxMembers[clan.level]) {
            throw new Error('‚ùå Este cl√£ est√° cheio!');
        }

        // Adiciona ao cl√£
        clan.members.push(player.id);
        player.clan = {
            id: clanId,
            joined: Date.now()
        };

        return {
            success: true,
            message: `‚úÖ Voc√™ entrou no cl√£ ${clan.name} [${clan.tag}]!`
        };
    }

    leaveClan(player) {
        if (!player.clan) throw new Error('‚ùå Voc√™ n√£o est√° em um cl√£!');

        const clan = this.clans[player.clan.id];
        if (!clan) throw new Error('‚ùå Cl√£ n√£o encontrado!');

        // Remove do cl√£
        clan.members = clan.members.filter(id => id !== player.id);
        clan.officers = clan.officers.filter(id => id !== player.id);

        // Se era o l√≠der, promove oficial mais antigo
        if (clan.leader === player.id) {
            if (clan.officers.length > 0) {
                clan.leader = clan.officers[0];
                clan.officers = clan.officers.slice(1);
            } else if (clan.members.length > 0) {
                clan.leader = clan.members[0];
            } else {
                // Cl√£ ficou vazio, deleta
                delete this.clans[clan.id];
                return {
                    success: true,
                    message: `üè∞ O cl√£ ${clan.name} foi dissolvido!`
                };
            }
        }

        delete player.clan;

        return {
            success: true,
            message: `‚úÖ Voc√™ saiu do cl√£ ${clan.name}!`
        };
    }

    promoteMember(leader, targetId, clanId) {
        const clan = this.clans[clanId];
        if (!clan) throw new Error('‚ùå Cl√£ n√£o encontrado!');

        // Verifica permiss√£o
        if (clan.leader !== leader.id) {
            throw new Error('‚ùå Apenas o l√≠der pode promover membros!');
        }

        // Verifica se alvo √© membro
        if (!clan.members.includes(targetId)) {
            throw new Error('‚ùå Jogador n√£o √© membro do cl√£!');
        }

        // Promove para oficial
        clan.members = clan.members.filter(id => id !== targetId);
        clan.officers.push(targetId);

        return {
            success: true,
            message: `‚≠ê Membro promovido a Oficial!`
        };
    }

    demoteMember(leader, targetId, clanId) {
        const clan = this.clans[clanId];
        if (!clan) throw new Error('‚ùå Cl√£ n√£o encontrado!');

        // Verifica permiss√£o
        if (clan.leader !== leader.id) {
            throw new Error('‚ùå Apenas o l√≠der pode rebaixar oficiais!');
        }

        // Verifica se alvo √© oficial
        if (!clan.officers.includes(targetId)) {
            throw new Error('‚ùå Jogador n√£o √© oficial do cl√£!');
        }

        // Rebaixa para membro
        clan.officers = clan.officers.filter(id => id !== targetId);
        clan.members.push(targetId);

        return {
            success: true,
            message: `‚¨áÔ∏è Oficial rebaixado a Membro!`
        };
    }

    kickMember(leader, targetId, clanId) {
        const clan = this.clans[clanId];
        if (!clan) throw new Error('‚ùå Cl√£ n√£o encontrado!');

        // Verifica permiss√£o
        if (clan.leader !== leader.id && !clan.officers.includes(leader.id)) {
            throw new Error('‚ùå Apenas l√≠der e oficiais podem expulsar membros!');
        }

        // Verifica se alvo √© membro
        if (!clan.members.includes(targetId)) {
            throw new Error('‚ùå Jogador n√£o √© membro do cl√£!');
        }

        // Remove do cl√£
        clan.members = clan.members.filter(id => id !== targetId);

        return {
            success: true,
            message: `‚ùå Membro expulso do cl√£!`
        };
    }

    depositResource(player, resource, amount) {
        if (!player.clan) throw new Error('‚ùå Voc√™ n√£o est√° em um cl√£!');

        const clan = this.clans[player.clan.id];
        if (!clan) throw new Error('‚ùå Cl√£ n√£o encontrado!');

        // Verifica capacidade do banco
        const currentTotal = Object.values(clan.bank.resources)
            .reduce((sum, amt) => sum + amt, 0);
        
        if (currentTotal + amount > clan.bank.capacity) {
            throw new Error('‚ùå Banco do cl√£ est√° cheio!');
        }

        // Deposita recurso
        if (!clan.bank.resources[resource]) {
            clan.bank.resources[resource] = 0;
        }
        clan.bank.resources[resource] += amount;

        return {
            success: true,
            message: `‚úÖ Depositado ${amount}x ${resource} no banco do cl√£!`
        };
    }

    withdrawResource(player, resource, amount) {
        if (!player.clan) throw new Error('‚ùå Voc√™ n√£o est√° em um cl√£!');

        const clan = this.clans[player.clan.id];
        if (!clan) throw new Error('‚ùå Cl√£ n√£o encontrado!');

        // Verifica se tem o recurso
        if (!clan.bank.resources[resource] || clan.bank.resources[resource] < amount) {
            throw new Error('‚ùå Recursos insuficientes no banco!');
        }

        // Retira recurso
        clan.bank.resources[resource] -= amount;

        return {
            success: true,
            message: `‚úÖ Retirado ${amount}x ${resource} do banco do cl√£!`
        };
    }

    upgradeBuilding(leader, buildingId, clanId) {
        const clan = this.clans[clanId];
        if (!clan) throw new Error('‚ùå Cl√£ n√£o encontrado!');

        // Verifica permiss√£o
        if (clan.leader !== leader.id) {
            throw new Error('‚ùå Apenas o l√≠der pode melhorar constru√ß√µes!');
        }

        const building = this.upgrades[buildingId];
        if (!building) throw new Error('‚ùå Constru√ß√£o n√£o encontrada!');

        const currentLevel = clan.buildings[buildingId];
        if (currentLevel >= building.maxLevel) {
            throw new Error('‚ùå Constru√ß√£o j√° est√° no n√≠vel m√°ximo!');
        }

        // Verifica custo
        const cost = building.cost(currentLevel + 1);
        if (clan.money < cost) {
            throw new Error(`‚ùå O cl√£ precisa de R$ ${cost} para esta melhoria!`);
        }

        // Aplica upgrade
        clan.money -= cost;
        clan.buildings[buildingId]++;

        // Aplica efeitos
        const effect = building.effect(clan.buildings[buildingId]);
        if (buildingId === 'banco') {
            clan.bank.capacity = effect.capacity;
        }

        return {
            success: true,
            message: `üèóÔ∏è *CONSTRU√á√ÉO MELHORADA*\n\n` +
                    `${building.name} ‚û°Ô∏è N√≠vel ${clan.buildings[buildingId]}\n` +
                    `Efeito: ${Object.entries(effect)
                        .map(([stat, value]) => `${stat} +${value * 100}%`)
                        .join(', ')}`
        };
    }

    formatClanList() {
        let text = `üõ°Ô∏è *CL√ÉS* üõ°Ô∏è\n\n`;

        Object.values(this.clans).forEach(clan => {
            text += `*${clan.name}* [${clan.tag}]\n`;
            text += `‚îú N√≠vel: ${clan.level}\n`;
            text += `‚îú Membros: ${clan.members.length + clan.officers.length + 1}/${this.maxMembers[clan.level]}\n`;
            text += `‚îú Guerras: ${clan.wars.wins}V/${clan.wars.losses}D\n`;
            text += `‚îî Constru√ß√µes:\n`;
            Object.entries(clan.buildings).forEach(([id, level]) => {
                if (level > 0) {
                    text += `   ‚îî ${this.upgrades[id].name}: ${level}\n`;
                }
            });
            text += '\n';
        });

        return text;
    }

    formatClanInfo(clan) {
        let text = `üõ°Ô∏è *${clan.name}* [${clan.tag}]\n\n`;
        text += `N√≠vel: ${clan.level}\n`;
        text += `XP: ${clan.xp}/${clan.level * 1000}\n`;
        text += `Dinheiro: R$ ${clan.money}\n\n`;

        text += `*Membros (${clan.members.length + clan.officers.length + 1}/${this.maxMembers[clan.level]})*\n`;
        text += `üëë L√≠der: ${clan.leader}\n`;
        if (clan.officers.length > 0) {
            text += `‚≠ê Oficiais:\n`;
            clan.officers.forEach(id => {
                text += `‚îú ${id}\n`;
            });
        }
        if (clan.members.length > 0) {
            text += `üë• Membros:\n`;
            clan.members.forEach(id => {
                text += `‚îú ${id}\n`;
            });
        }

        text += `\n*Constru√ß√µes*\n`;
        Object.entries(clan.buildings).forEach(([id, level]) => {
            const building = this.upgrades[id];
            text += `${building.name}\n`;
            text += `‚îú N√≠vel: ${level}/${building.maxLevel}\n`;
            if (level > 0) {
                const effect = building.effect(level);
                text += `‚îî B√¥nus: ${Object.entries(effect)
                    .map(([stat, value]) => `${stat} +${value * 100}%`)
                    .join(', ')}\n`;
            }
            text += '\n';
        });

        text += `*Banco do Cl√£*\n`;
        text += `Capacidade: ${clan.bank.capacity}\n`;
        if (Object.keys(clan.bank.resources).length > 0) {
            text += `Recursos:\n`;
            Object.entries(clan.bank.resources).forEach(([resource, amount]) => {
                text += `‚îî ${resource}: ${amount}\n`;
            });
        }

        text += `\n*Guerras*\n`;
        text += `Vit√≥rias: ${clan.wars.wins}\n`;
        text += `Derrotas: ${clan.wars.losses}\n`;
        text += `Taxa: ${((clan.wars.wins / (clan.wars.wins + clan.wars.losses)) * 100).toFixed(1)}%`;

        return text;
    }
}

module.exports = new ClanSystem();
